#!/usr/bin/env python
# -*-coding:utf-8-*-

import rospy
import cv2
import numpy as np
import sys

from std_msgs.msg import String
from sensor_msgs.msg import CompressedImage
from cv_bridge import CvBridge, CvBridgeError

class img_Processing :
    def __init__(self, _mode, _lowV) :
        rospy.loginfo("Image_Processing - mode({}), lowV({})".format(_mode, _lowV))
        self.mode = _mode

        if int(_lowV) == 0 :
            self.lowV = 150
        else :
            self.lowV = int(_lowV)

        self.lowH = 0
        self.lowS = 0

        self.highH = 255
        self.highS = 255
        self.highV = 255

        if _mode == 'C' :           # For Check Image of the detected lane
            rospy.Subscriber("/usb_cam/image_rect_color/compressed", CompressedImage, self.imgCheckcallback )
        elif _mode == 'M' :
            rospy.Subscriber("/usb_cam/image_rect_color/compressed", CompressedImage, self.imgMomentcallback )
        elif _mode == 'R' :
            rospy.Subscriber("/usb_cam/image_rect_color/compressed", CompressedImage, self.roiLaneDetectioncallback )

        self.initialized = False
        self.bridge = CvBridge()


    def imgCheckcallback(self, _data) :
        if (self.initialized == False) :
            cv2.namedWindow("Rect_Image", cv2.WINDOW_NORMAL)
            cv2.createTrackbar('low_H', 'Rect_Image', 0, 255, nothing)
            cv2.createTrackbar('low_S', 'Rect_Image', 0, 255, nothing)
            # Lane Image 확인하고, 값 변경, default=150
            cv2.createTrackbar('low_V', 'Rect_Image', self.lowV, 255, nothing)    
            cv2.createTrackbar('high_H', 'Rect_Image', 255, 255, nothing)
            cv2.createTrackbar('high_S', 'Rect_Image', 255, 255, nothing)
            cv2.createTrackbar('high_V', 'Rect_Image', 255, 255, nothing)
            self.initialized = True

        # rospy.loginfo(len(_data.data))
        # rospy.loginfo(type(_data.data))

        cv_image = self.bridge.compressed_imgmsg_to_cv2(_data)
        # rospy.loginfo(cv_image.shape)
        # rospy.loginfo(type(cv_image))

        cv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

        crop_image_left = cv_image.copy()[300:480, 0:320, :]
        crop_image_right = cv_image.copy()[300:480, 320:640, :]

        # cv2.line(crop_image, (320, 300), (320,480), (255, 0, 0), 1)
        
        low_H = cv2.getTrackbarPos('low_H', 'Rect_Image')
        low_S = cv2.getTrackbarPos('low_S', 'Rect_Image')
        low_V = cv2.getTrackbarPos('low_V', 'Rect_Image')
        high_H = cv2.getTrackbarPos('high_H', 'Rect_Image')
        high_S = cv2.getTrackbarPos('high_S', 'Rect_Image')
        high_V = cv2.getTrackbarPos('high_V', 'Rect_Image')

        lower_lane = np.array([low_H, low_S, low_V])
        upper_lane = np.array([high_H, high_S, high_V])

        lane_image_left = cv2.inRange( crop_image_left, lower_lane, upper_lane)
        lane_image_right = cv2.inRange( crop_image_right, lower_lane, upper_lane)

        cv2.imshow("Lane Image Left", lane_image_left)
        cv2.imshow("Lane Image Right", lane_image_right)

        # ch1, ch2, ch3 = cv2.split(cv_image)
        # cv2.imshow("Rect_Image", cv_image)
        # cv2.imshow("Rect_Image - CH1", ch1) # 색상
        # cv2.imshow("Rect_Image - CH2", ch2) # Saturation
        # cv2.imshow("Rect_Image - CH3", ch3) # 밝기

        cv2.waitKey(1)

    def imgMomentcallback(self, _data) :
        cv_image = self.bridge.compressed_imgmsg_to_cv2(_data)

        cv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

        crop_image_left = cv_image.copy()[400:480, 0:250, :]
        crop_image_right = cv_image.copy()[400:480, 390:640, :]

        lower_lane = np.array([self.lowH, self.lowS, self.lowV])
        upper_lane = np.array([self.highH, self.highS, self.highV])

        lane_image_left = cv2.inRange( crop_image_left, lower_lane, upper_lane)
        lane_image_right = cv2.inRange( crop_image_right, lower_lane, upper_lane)

        self.dlflag = True
        ML = cv2.moments(lane_image_left)
        if ( ML['m00'] > 0 ) :
            self.xl = int(ML['m10']/ML['m00'])
            self.yl = int(ML['m01']/ML['m00'])
            cv2.circle(crop_image_left, (self.xl, self.yl), 3, (0, 255, 0), -1)
        elif ML['m00'] == 0 :
            self.dlflag = False

        cv2.imshow("Result Image Left", crop_image_left)

        self.drflag = True
        MR = cv2.moments(lane_image_right)
        if ( MR['m00'] > 0 ) :
            self.xr = int(MR['m10']/MR['m00'])
            self.yr = int(MR['m01']/MR['m00'])
            cv2.circle(crop_image_right, (self.xr, self.yr), 3, (0, 255, 0), -1)
        elif MR['m00'] == 0 :
            self.drflag = False

        cv2.imshow("Result Image Right", crop_image_right)

        cv2.imshow("Lane Image Left", lane_image_left)
        cv2.imshow("Lane Image Right", lane_image_right)

        cv2.waitKey(1)

    def roiLaneDetectioncallback(self, _data):
        cv_image = self.bridge.compressed_imgmsg_to_cv2(_data)
        
        # create a zero array
        stencil = np.zeros_like(cv_image[:,:,0])

        # specify coordinates of the polygon
        polygon = np.array([[0,470], [140,360], [500,360], [640,470]])

        # fill polygon with ones
        cv2.fillConvexPoly(stencil, polygon, 1)

        polygone_img = cv2.bitwise_and(cv_image[:,:,0], cv_image[:,:,0], mask=stencil)
        # cv2.imshow("poly gone image", polygone_img)

        ret, thresh = cv2.threshold(polygone_img, 130, 145, cv2.THRESH_BINARY)
        # cv2.imshow("Image Threshholding", thresh)

        lines = cv2.HoughLinesP(thresh, 1, np.pi/180, 30, maxLineGap=200)

        # create a copy of the original frame
        # dmy = cv_image[:,:,0].copy()

        line_only_image = np.zeros_like(cv_image[:,:,0])

        # draw Hough lines
        if lines is not None :
            for line in lines:
                x1, y1, x2, y2 = line[0]
                # cv2.line(dmy, (x1, y1), (x2, y2), (255, 0, 0), 3)
                cv2.line(line_only_image, (x1, y1), (x2, y2), (255, 0, 0), 3)

        # cv2.imshow("Hough Lines", dmy)

        # rospy.loginfo("type of dmy = {}".format(type(dmy)))
        # rospy.loginfo("shape of dmy = {}".format(dmy.shape))

        crop_image = line_only_image.copy()[350:480, 0:640]
        cv2.imshow("crop_image", crop_image)
        cv2.imshow("line_only_image", line_only_image)

    
        cv2.waitKey(1)

    def findLanecallback(self, _data):
        pass

 
def nothing(pos):
    pass

def run(_mode, _lowV):
    rospy.init_node('image_processing', anonymous=True)
    ip = img_Processing(_mode, _lowV)

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Program down")


if __name__ == "__main__":
    run(sys.argv[1], sys.argv[2])