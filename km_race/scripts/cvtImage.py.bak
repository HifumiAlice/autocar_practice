#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import cv2
import numpy as np
import sys

from std_msgs.msg import String
from std_msgs.msg import Int32
from km_race.msg import dist

from sensor_msgs.msg import CompressedImage
from cv_bridge import CvBridge, CvBridgeError

class cvtImage :
    def __init__(self) :
        rospy.loginfo("CVT Image")

        self.lowH = 0
        self.lowS = 0
        self.lowV = 150

        self.highH = 255
        self.highS = 255
        self.highV = 255

        rospy.Subscriber("/usb_cam/image_rect_color/compressed", CompressedImage, self.imgMomentcallback )
        rospy.Subscriber("/cvt_value", Int32, self.getCVTValue )

        self.lane_moment_pub = rospy.Publisher("dist_x", dist, queue_size=3)
        
        # self.initialized = False
        self.bridge = CvBridge()

    # run command : rosrun km_race img_Processing.py M xxx  <-- xxx should be determinded by imgCheckcallback 
    def imgMomentcallback(self, _data) :
        cv_image = self.bridge.compressed_imgmsg_to_cv2(_data)

        cv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)

        # crop_image_left = cv_image.copy()[400:480, 0:250, :]
        # crop_image_right = cv_image.copy()[400:480, 390:640, :]
        
        crop_image_left = cv_image.copy()[300:480, 0:320, :]
        crop_image_right = cv_image.copy()[300:480, 321:640, :]


        # rospy.loginfo("lowV = {}".format(self.lowV))

        lower_lane = np.array([self.lowH, self.lowS, self.lowV])
        upper_lane = np.array([self.highH, self.highS, self.highV])

        lane_image_left = cv2.inRange( crop_image_left, lower_lane, upper_lane)
        lane_image_right = cv2.inRange( crop_image_right, lower_lane, upper_lane)

        self.dlflag = True
        ML = cv2.moments(lane_image_left)
        if ( ML['m00'] > 0 ) :
            self.xl = int(ML['m10']/ML['m00'])
            self.yl = int(ML['m01']/ML['m00'])
            cv2.circle(crop_image_left, (self.xl, self.yl), 3, (0, 255, 0), -1)
            cv2.circle(cv_image, (self.xl, self.yl + 300), 3, (0, 255, 0), -1)
        elif ML['m00'] == 0 :
            self.xl = 0
            self.yl = 0
            self.dlflag = False


        self.drflag = True
        MR = cv2.moments(lane_image_right)
        if ( MR['m00'] > 0 ) :
            self.xr = int(MR['m10']/MR['m00'])
            self.yr = int(MR['m01']/MR['m00'])
            cv2.circle(crop_image_right, (self.xr, self.yr), 3, (0, 255, 0), -1)
            cv2.circle(cv_image, (self.xr+320, self.yr+300), 3, (0, 255, 0), -1)
        elif MR['m00'] == 0 :
            self.xr = 0
            self.yr = 0
            self.drflag = False

        pub_data = dist()
        pub_data.dist_left = self.xl
        pub_data.dist_right = self.xr

        self.lane_moment_pub.publish(pub_data)

        cv2.imshow("CVT-CV Image", cv_image)
        # cv2.imshow("CVT-Result Image Left", crop_image_left)
        # cv2.imshow("CVT-Result Image Right", crop_image_right)

        # cv2.imshow("CVT-Lane Image Left", lane_image_left)
        # cv2.imshow("CVT-Lane Image Right", lane_image_right)

        cv2.waitKey(1)

    def getCVTValue(self, _data) :
        self.lowV = _data.data
        # rospy.loginfo("Get lowV = {}".format(self.lowV))

    def getLaneCoordinates(self, _data) :
        pass



def run( ):
    rospy.init_node('cvtImage', anonymous=True)
    cvtImage( )

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Program down")


if __name__ == "__main__":
    run( )
